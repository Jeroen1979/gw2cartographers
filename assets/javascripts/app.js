// Generated by CoffeeScript 1.3.3
(function() {

  window.LANG = "en";

  Cartographer.LOCAL_STORAGE = (function() {
    if (window['localStorage'] != null) {
      return true;
    } else {
      return false;
    }
  })();

  Cartographer.initiate = function() {
    this.router = new Cartographer.router();
    return this.templatesLoader = new Cartographer.TemplatesLoader();
  };

  Cartographer.switchLang = function(lang) {
    if (window.LANG !== lang) {
      console.log("switching lang to " + lang);
      return window.LANG = lang;
    }
  };

  Cartographer.highlighMarker = function(coord) {
    return console.log("highlighting marker at " + coord.lat + ", " + coord.lgn);
  };

  Cartographer.TemplatesLoader = (function() {

    function TemplatesLoader() {
      this.templates = {
        "confirmBox": {
          path: "assets/javascripts/templates/confirmBox._",
          version: 1
        },
        "customInfoWindow": {
          path: "assets/javascripts/templates/customInfoWindow._",
          version: 2
        },
        "markersOptions": {
          path: "assets/javascripts/templates/markersOptions._",
          version: 1
        },
        "areasSummary": {
          path: "assets/javascripts/templates/areasSummary._",
          version: 1
        }
      };
    }

    TemplatesLoader.prototype.getTemplate = function(templateName, callback) {
      var localTemplate, localTemplateVersion,
        _this = this;
      if (Cartographer.LOCAL_STORAGE) {
        localTemplate = localStorage.getItem(templateName);
        localTemplateVersion = localStorage.getItem("" + templateName + "Version");
        if (localTemplate && ((localTemplateVersion != null) && parseInt(localTemplateVersion) === this.templates[templateName].version)) {
          return callback(localTemplate);
        } else if (this.templates[templateName] != null) {
          return $.get(this.templates[templateName].path, function(e) {
            localStorage.setItem(templateName, e);
            localStorage.setItem("" + templateName + "Version", _this.templates[templateName].version);
            return callback(e);
          });
        }
      } else {
        return $.get(this.templates[templateName], function(e) {
          return callback(e);
        });
      }
    };

    return TemplatesLoader;

  })();

  Cartographer.router = Backbone.Router.extend({
    routes: {},
    initialize: function() {
      var routes,
        _this = this;
      routes = [[/^(en|fr)\/*$/, 'lang', this.handleLang], [/^(en|fr)*\/lat\/([0-9.]+)\/lgn\/([0-9.]+)\/*$/, 'coord', this.handleLangWithParams]];
      _.each(routes, function(route) {
        return _this.route.apply(_this, route);
      });
      return Backbone.history.start();
    },
    handleLang: function(lang) {
      return Cartographer.switchLang(lang);
    },
    handleCoord: function(lang, lat, lgn) {
      this.handleLang(lang);
      return Cartographer.highlighMarker({
        lat: lat,
        lgn: lgn
      });
    }
  });

  $(function() {
    return Cartographer.initiate();
  });

}).call(this);
