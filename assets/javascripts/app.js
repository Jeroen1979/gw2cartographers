// Generated by CoffeeScript 1.3.1
(function() {
  var AreaSummary, CustomInfoWindow,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.LANG = (function() {
    var hash, match, regex;
    hash = window.location.hash;
    regex = /^#\/*(en|fr)\/*/;
    match = regex.exec(hash);
    if (match) {
      return match[1];
    } else {
      return "en";
    }
  })();

  window.LOCAL_STORAGE = (function() {
    if (window['localStorage'] != null) {
      return true;
    } else {
      return false;
    }
  })();

  Cartographer.initiate = function() {
    var _this = this;
    this.templates = new Cartographer.TemplatesLoader();
    return this.templates.loadDefaults(function() {
      return _this.currentMap = new Cartographer.CustomMap('#map', {
        "onLoad": _this.mapHasLoaded
      });
    });
  };

  Cartographer.mapHasLoaded = function() {
    return this.router = new Cartographer.router();
  };

  Cartographer.switchLang = function(lang) {
    var url;
    if (window.LANG !== lang) {
      url = "http://" + window.location.hostname + "/" + window.location.hash;
      window.location = url;
      return window.location.reload(true);
    }
  };

  Cartographer.highlighMarker = function(target) {
    if (_.isObject(target)) {
      return this.currentMap.panToCoord(target);
    } else {
      return this.currentMap.panToMarker(target);
    }
  };

  Cartographer.toggleCat = function(cats) {
    return this.currentMap.highlightsCat(cats);
  };

  /*
  # class Cartographer.TemplatesLoader {{{
  */


  Cartographer.TemplatesLoader = (function() {

    TemplatesLoader.name = 'TemplatesLoader';

    function TemplatesLoader() {
      this.templates = {
        "confirmBox": {
          name: "confirmBox",
          path: "assets/javascripts/templates/confirmBox._",
          version: 1,
          src: "",
          loadOnStart: true
        },
        "customInfoWindow": {
          name: "customInfoWindow",
          path: "assets/javascripts/templates/customInfoWindow._",
          version: 3,
          src: "",
          loadOnStart: true
        },
        "markersOptions": {
          name: "markersOptions",
          path: "assets/javascripts/templates/markersOptions._",
          version: 1,
          src: "",
          loadOnStart: true
        },
        "areasSummary": {
          name: "areasSummary",
          path: "assets/javascripts/templates/areasSummary._",
          version: 2,
          src: "",
          loadOnStart: true
        }
      };
    }

    TemplatesLoader.prototype.get = function(templateName, callback) {
      var handleCallback, localTemplate, localTemplateVersion,
        _this = this;
      handleCallback = function(template) {
        if (callback != null) {
          return callback(template);
        } else {
          return retu;
        }
      };
      if (LOCAL_STORAGE) {
        localTemplate = localStorage.getItem(templateName);
        localTemplateVersion = localStorage.getItem("" + templateName + "Version");
        if ((this.templates[templateName] != null) && this.templates[templateName].src !== "") {
          if (callback != null) {
            return callback(this.templates[templateName].src);
          } else {
            return this.templates[templateName].src;
          }
        } else if (localTemplate && ((localTemplateVersion != null) && parseInt(localTemplateVersion) === this.templates[templateName].version)) {
          this.templates[templateName].src = localTemplate;
          if (callback != null) {
            return callback(localTemplate);
          } else {
            return localTemplate;
          }
        } else if (this.templates[templateName] != null) {
          return $.get(this.templates[templateName].path, function(e) {
            localStorage.setItem(templateName, e);
            _this.templates[templateName].src = e;
            localStorage.setItem("" + templateName + "Version", _this.templates[templateName].version);
            return callback(e);
          });
        }
      } else {
        return $.get(this.templates[templateName].path, function(e) {
          return callback(e);
        });
      }
    };

    TemplatesLoader.prototype.loadDefaults = function(callback) {
      var templateToLoad,
        _this = this;
      templateToLoad = _.filter(this.templates, function(template, name) {
        return template.loadOnStart;
      });
      this.queue = templateToLoad.length;
      return _.each(templateToLoad, function(template, name) {
        return _this.get(template.name, function() {
          _this.queue--;
          if (_this.queue === 0) {
            return callback();
          }
        });
      });
    };

    return TemplatesLoader;

  })();

  /*
  #}}}
  */


  /*
  # class Cartographer.ModalBox {{{
  */


  Cartographer.Modalbox = (function() {

    Modalbox.name = 'Modalbox';

    function Modalbox() {
      this.close = __bind(this.close, this);
      this.modal = $('<div class="modal"><div class="padding"></div></div>');
      this.overlay = $('<span class="overlay"></span>');
      $('body').append(this.modal);
      $('body').append(this.overlay);
      this.overlay.bind('click', this.close);
    }

    Modalbox.prototype.open = function() {
      this.modal.addClass('visible');
      return this.overlay.addClass('visible');
    };

    Modalbox.prototype.close = function(callback) {
      var t,
        _this = this;
      callback = _.isFunction(callback) ? callback : function() {};
      this.modal.addClass('fadding');
      this.overlay.addClass('fadding');
      return t = setTimeout(function() {
        _this.modal.removeClass('visible fadding');
        _this.overlay.removeClass('visible fadding');
        return callback();
      }, 150);
    };

    Modalbox.prototype.setContent = function(content) {
      return this.modal.find('.padding').html(content);
    };

    return Modalbox;

  })();

  /*
  #}}}
  */


  /*
  # class Cartographer.Confirmbox {{{
  */


  Cartographer.Confirmbox = (function(_super) {

    __extends(Confirmbox, _super);

    Confirmbox.name = 'Confirmbox';

    function Confirmbox(template) {
      Confirmbox.__super__.constructor.apply(this, arguments);
      this.modal.addClass('confirm-box');
      this.template = template;
      this.overlay.unbind('click');
    }

    Confirmbox.prototype.initConfirmation = function(contentString, callback) {
      var acceptBtn, confirmBoxContent, confirmMessage, deniedBtn,
        _this = this;
      confirmMessage = {
        confirmMessage: contentString
      };
      confirmBoxContent = $(this.template(confirmMessage));
      acceptBtn = confirmBoxContent.find('#accept');
      deniedBtn = confirmBoxContent.find('#denied');
      this.modal.find('.padding').html(confirmBoxContent);
      acceptBtn.bind('click', function() {
        callback(true);
        return _this.close();
      });
      deniedBtn.bind('click', function() {
        callback(false);
        return _this.close();
      });
      return this.open();
    };

    return Confirmbox;

  })(Cartographer.Modalbox);

  /*
  #}}}
  */


  /*
  # class Cartographer.CustomMap {{{
  */


  Cartographer.CustomMap = (function() {

    CustomMap.name = 'CustomMap';

    function CustomMap(HTMLMapWrapperID, opts) {
      this.handleAddTool = __bind(this.handleAddTool, this);

      this.handleExport = __bind(this.handleExport, this);

      this.sendMapForApproval = __bind(this.sendMapForApproval, this);

      this.destroyLocalStorage = __bind(this.destroyLocalStorage, this);

      this.createInfoWindow = __bind(this.createInfoWindow, this);

      var confirmBoxTemplate,
        _this = this;
      this.markersOptionsMenu = $('#markers-options');
      this.startLat = 15.443090823463786;
      this.startLng = 7.294921875;
      this.defaultCat = "explore";
      this.localStorageKey = "gw2c_markers_config_01";
      this.blankTilePath = 'tiles/00empty.jpg';
      this.areaSummaryBoxes = [];
      this.markersImages = {};
      this.mapMarkersObject = {};
      this.draggableMarker = false;
      this.visibleMarkers = true;
      this.canToggleMarkers = true;
      this.currentOpenedInfoWindow = false;
      this.currentMapVersion = 1;
      this.initCustomGoogleMap(HTMLMapWrapperID);
      this.editInfoWindowTemplate = _.template(Cartographer.templates.get("customInfoWindow"));
      confirmBoxTemplate = _.template(Cartographer.templates.get("confirmBox"));
      this.confirmBox = new Cartographer.Confirmbox(confirmBoxTemplate);
      this.initializeAreaSummaryBoxes();
      google.maps.event.addListenerOnce(this.map, 'idle', function() {
        return _this.handleLocalStorageLoad(function() {
          _this.addMenuIcons();
          _this.addTools = $('.menu-marker a.add');
          _this.addTools.each(function(index, target) {
            return $(target).bind('click', _this.handleAddTool);
          });
          $('#destroy').bind('click', _this.destroyLocalStorage);
          $('#send').bind('click', _this.sendMapForApproval);
          _this.setAllMarkers();
          _this.bindMapEvents();
          _this.map.setZoom(4);
          return opts.onLoad();
        });
      });
    }

    CustomMap.prototype.bindMapEvents = function() {
      var _this = this;
      google.maps.event.addListener(this.map, 'zoom_changed', function(e) {
        var zoomLevel;
        zoomLevel = _this.map.getZoom();
        if (zoomLevel === 4) {
          _this.canToggleMarkers = false;
          _this.hideMarkersOptionsMenu();
          _this.setAllMarkersVisibility(false);
          _this.setAreasInformationVisibility(true);
          if (_this.currentOpenedInfoWindow) {
            return _this.currentOpenedInfoWindow.close();
          }
        } else if (zoomLevel > 4) {
          _this.canToggleMarkers = true;
          _this.showMarkersOptionsMenu();
          _this.setAllMarkersVisibility(true);
          return _this.setAreasInformationVisibility(false);
        } else if (zoomLevel < 4) {
          _this.canToggleMarkers = false;
          _this.hideMarkersOptionsMenu();
          _this.setAllMarkersVisibility(false);
          _this.setAreasInformationVisibility(false);
          if (_this.currentOpenedInfoWindow) {
            return _this.currentOpenedInfoWindow.close();
          }
        }
      });
      return google.maps.event.addListener(this.map, 'click', function(e) {
        return console.log("Lat : " + (e.latLng.lat()) + ", Lng : " + (e.latLng.lng()));
      });
    };

    CustomMap.prototype.highlightMarker = function(marker) {
      this.map.setZoom(6);
      if (this.currentOpenedInfoWindow) {
        this.currentOpenedInfoWindow.close();
      }
      marker.setVisible(true);
      if (!(marker.infoWindow != null)) {
        this.createInfoWindow(marker);
        this.currentOpenedInfoWindow = marker.infoWindow;
        return marker.infoWindow.open();
      } else {
        marker.infoWindow.open();
        return this.currentOpenedInfoWindow = marker.infoWindow;
      }
    };

    CustomMap.prototype.panToCoord = function(coord) {
      var marker, markerType, markerTypeObject, markersCat, markersObjects, _ref, _results;
      _ref = this.mapMarkersObject;
      _results = [];
      for (markersCat in _ref) {
        markersObjects = _ref[markersCat];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = markersObjects.marker_types;
          _results1 = [];
          for (markerType in _ref1) {
            markerTypeObject = _ref1[markerType];
            _results1.push((function() {
              var _i, _len, _ref2, _results2;
              _ref2 = markerTypeObject.markers;
              _results2 = [];
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                marker = _ref2[_i];
                if (coord.lat === marker.position.lat().toString() && coord.lng === marker.position.lng().toString()) {
                  _results2.push(this.highlightMarker(marker));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.panToMarker = function(markerId) {
      var marker, markerType, markerTypeObject, markersCat, markersObjects, _ref, _results;
      _ref = this.mapMarkersObject;
      _results = [];
      for (markersCat in _ref) {
        markersObjects = _ref[markersCat];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = markersObjects.marker_types;
          _results1 = [];
          for (markerType in _ref1) {
            markerTypeObject = _ref1[markerType];
            _results1.push((function() {
              var _i, _len, _ref2, _results2;
              _ref2 = markerTypeObject.markers;
              _results2 = [];
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                marker = _ref2[_i];
                if (parseInt(markerId) === marker.id_marker) {
                  _results2.push(this.highlightMarker(marker));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.initCustomGoogleMap = function(HTMLMapWrapperID) {
      var maxZoom,
        _this = this;
      maxZoom = 7;
      this.gMapOptions = {
        center: new google.maps.LatLng(this.startLat, this.startLng),
        zoom: 5,
        minZoom: 3,
        maxZoom: maxZoom,
        streetViewControl: false,
        mapTypeControl: false,
        mapTypeControlOptions: {
          mapTypeIds: ["custom", google.maps.MapTypeId.ROADMAP]
        },
        panControl: false,
        zoomControl: true,
        zoomControlOptions: {
          position: google.maps.ControlPosition.LEFT_CENTER,
          zoomControlStyle: google.maps.ZoomControlStyle.SMALL
        }
      };
      this.customMapType = new google.maps.ImageMapType({
        getTileUrl: function(coord, zoom) {
          var normalizedCoord, path;
          normalizedCoord = coord;
          if (normalizedCoord && (normalizedCoord.x < Math.pow(2, zoom)) && (normalizedCoord.x > -1) && (normalizedCoord.y < Math.pow(2, zoom)) && (normalizedCoord.y > -1)) {
            return path = 'tiles/' + zoom + '_' + normalizedCoord.x + '_' + normalizedCoord.y + '.jpg';
          } else {
            return _this.blankTilePath;
          }
        },
        tileSize: new google.maps.Size(256, 256),
        maxZoom: maxZoom,
        name: 'GW2 Map'
      });
      this.map = new google.maps.Map($(HTMLMapWrapperID)[0], this.gMapOptions);
      this.map.mapTypes.set('custom', this.customMapType);
      return this.map.setMapTypeId('custom');
    };

    CustomMap.prototype.handleLocalStorageLoad = function(callback) {
      var confirmMessage,
        _this = this;
      if (window.LOCAL_STORAGE && this.getConfigFromLocalStorage()) {
        confirmMessage = Traduction["notice"]["localDetected"][LANG];
        return this.confirmBox.initConfirmation(confirmMessage, function(e) {
          var loadedConfig;
          if (e) {
            loadedConfig = _this.getConfigFromLocalStorage();
            _this.MarkersConfig = loadedConfig.markers;
          } else {
            _this.MarkersConfig = Markers;
          }
          return callback();
        });
      } else {
        this.MarkersConfig = Markers;
        return callback();
      }
    };

    CustomMap.prototype.getConfigFromLocalStorage = function() {
      var json;
      json = localStorage.getItem(this.localStorageKey);
      return JSON.parse(json);
    };

    CustomMap.prototype.addMarker = function(markerInfo, otherInfo, isNew, defaultValue) {
      var iconPath, iconmid, iconsize, image, isMarkerDraggable, marker, markerTitle, markerVisibility, markersCat, markersType,
        _this = this;
      iconsize = 32;
      iconmid = iconsize / 2;
      iconPath = Metadata.icons_path + otherInfo.icon;
      markersType = otherInfo["markersType"];
      markersCat = otherInfo["markersCat"];
      markerVisibility = markersCat === this.defaultCat || isNew ? true : false;
      if (!(this.markersImages[markersType] != null)) {
        image = new google.maps.MarkerImage(iconPath, null, null, new google.maps.Point(iconmid, iconmid), new google.maps.Size(iconsize, iconsize));
        this.markersImages[markersType] = image;
      }
      isMarkerDraggable = markerInfo.draggable != null ? markerInfo.draggable : false;
      if (defaultValue != null) {
        markerTitle = defaultValue[LANG]["title"] || defaultValue[LANG]["name"];
      } else {
        markerTitle = markerInfo["data_translation"][LANG]["title"];
      }
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(markerInfo.lat, markerInfo.lng),
        map: markerVisibility ? this.map : null,
        icon: this.markersImages[markersType],
        visible: markerVisibility,
        draggable: isMarkerDraggable,
        cursor: isMarkerDraggable ? "move" : "pointer",
        title: markerTitle,
        animation: isNew ? google.maps.Animation.DROP : false
      });
      if (defaultValue != null) {
        marker["data_translation"] = defaultValue;
        marker["hasDefaultValue"] = true;
      } else {
        marker["data_translation"] = markerInfo["data_translation"];
        marker["hasDefaultValue"] = false;
      }
      marker["id_marker"] = markerInfo["id"];
      marker["type"] = markersType;
      marker["cat"] = markersCat;
      if (markerInfo.lat.toString() === this.startLat && markerInfo.lng.toString() === this.startLng) {
        if (!(marker["infoWindow"] != null)) {
          this.createInfoWindow(marker);
          marker["infoWindow"].open();
        } else {
          marker["infoWindow"].open();
        }
      }
      google.maps.event.addListener(marker, 'dragend', function(e) {
        _this.saveToLocalStorage();
        if (marker["infoWindow"] != null) {
          return marker["infoWindow"].updatePos();
        }
      });
      google.maps.event.addListener(marker, 'click', function(e) {
        var lang;
        if (marker.id_marker.toString() !== "-1") {
          lang = window.LANG === "en" ? "" : "fr/";
          return window.location.hash = "/" + lang + "show/" + marker.id_marker + "/";
        } else {
          _this.createInfoWindow(marker);
          if (_this.currentOpenedInfoWindow) {
            _this.currentOpenedInfoWindow.close();
          }
          return marker["infoWindow"].open();
        }
      });
      return marker;
    };

    CustomMap.prototype.createInfoWindow = function(marker) {
      var editInfoWindowContent, lang, templateInfo,
        _this = this;
      lang = window.LANG === "en" ? "#/" : "#/fr/";
      templateInfo = {
        id: marker.__gm_id,
        title: (function() {
          if (marker["data_translation"][LANG]["title"] || marker["data_translation"][LANG]["name"]) {
            return marker["data_translation"][LANG]["title"] || marker["data_translation"][LANG]["name"];
          } else if (marker.type === "vistas" || marker.type === "skillpoints") {
            return Traduction["infoWindow"][marker.type][LANG];
          } else {
            return "";
          }
        })(),
        desc: marker["data_translation"][LANG]["desc"],
        wikiLink: marker["data_translation"][LANG]["link_wiki"] || "",
        hasDefaultValue: marker["hasDefaultValue"],
        type: marker.type,
        lat: marker.position.lat(),
        lng: marker.position.lng(),
        shareLink: "http://" + window.location.hostname + "/" + lang + "show/" + marker.id_marker + "/"
      };
      editInfoWindowContent = this.editInfoWindowTemplate(templateInfo);
      return marker["infoWindow"] = new CustomInfoWindow(marker, editInfoWindowContent, {
        onClose: function() {
          return _this.currentOpenedInfoWindow = null;
        },
        onOpen: function(infoWindow) {
          return _this.currentOpenedInfoWindow = infoWindow;
        },
        onSave: function(newInfo) {
          return _this.updateMarkerInfos(newInfo);
        },
        deleteCalled: function(marker) {
          return _this.removeMarker(marker.__gm_id, marker.type, marker.cat);
        },
        moveCalled: function(marker) {
          if (marker.getDraggable()) {
            marker.setDraggable(false);
            return marker.setCursor("pointer");
          } else {
            marker.setDraggable(true);
            return marker.setCursor("move");
          }
        },
        template: this.editInfoWindowTemplate
      });
    };

    CustomMap.prototype.setAllMarkers = function() {
      var defaultValue, marker, markerType, markerTypeObject, markersCat, markersObjects, newMarker, otherInfo, _ref, _results;
      this.currentMapVersion = Metadata.version;
      _ref = this.MarkersConfig;
      _results = [];
      for (markersCat in _ref) {
        markersObjects = _ref[markersCat];
        if (!(this.mapMarkersObject[markersCat] != null)) {
          this.mapMarkersObject[markersCat] = {};
          this.mapMarkersObject[markersCat]["data_translation"] = markersObjects.data_translation;
          this.mapMarkersObject[markersCat]["marker_types"] = {};
        }
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = markersObjects.marker_types;
          _results1 = [];
          for (markerType in _ref1) {
            markerTypeObject = _ref1[markerType];
            this.mapMarkersObject[markersCat]["marker_types"][markerType] = $.extend(true, {}, markerTypeObject);
            this.mapMarkersObject[markersCat]["marker_types"][markerType]["markers"] = [];
            otherInfo = {
              markersCat: markersCat,
              markersType: markerType,
              icon: markerTypeObject.icon
            };
            defaultValue = null;
            if ((markerTypeObject["data_translation"][LANG]["title"] != null) && (markerTypeObject["data_translation"][LANG]["desc"] != null)) {
              defaultValue = markerTypeObject["data_translation"];
            }
            _results1.push((function() {
              var _i, _len, _ref2, _results2;
              _ref2 = markerTypeObject.markers;
              _results2 = [];
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                marker = _ref2[_i];
                newMarker = this.addMarker(marker, otherInfo, false, defaultValue);
                _results2.push(this.mapMarkersObject[markersCat]["marker_types"][markerType]["markers"].push(newMarker));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.setAllMarkersVisibility = function(isVisible) {
      var cat, markerType, markerTypeObject, markersObjects, _ref, _results;
      _ref = this.mapMarkersObject;
      _results = [];
      for (cat in _ref) {
        markersObjects = _ref[cat];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = markersObjects.marker_types;
          _results1 = [];
          for (markerType in _ref1) {
            markerTypeObject = _ref1[markerType];
            if (!$("[data-type='" + markerType + "']").hasClass('off')) {
              _results1.push(this.setMarkersVisibilityByType(isVisible, markerType, cat));
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.setMarkersVisibilityByType = function(isVisible, type, cat) {
      var marker, _i, _len, _ref, _results;
      _ref = this.mapMarkersObject[cat]["marker_types"][type]["markers"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        if (marker.infoWindow != null) {
          marker.infoWindow.setMap(null);
          marker.infoWindow = null;
        }
        marker.setVisible(isVisible);
        if (isVisible) {
          if (!(marker.map != null)) {
            _results.push(marker.setMap(this.map));
          } else {
            _results.push(void 0);
          }
        } else {
          if (marker.map != null) {
            _results.push(marker.setMap(null));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    CustomMap.prototype.setMarkersVisibilityByCat = function(isVisible, cat) {
      var marker, markerType, markerTypeObject, _ref, _results;
      _ref = this.mapMarkersObject[cat]["marker_types"];
      _results = [];
      for (markerType in _ref) {
        markerTypeObject = _ref[markerType];
        _results.push((function() {
          var _i, _len, _ref1, _results1;
          _ref1 = markerTypeObject.markers;
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            marker = _ref1[_i];
            if (marker.infoWindow != null) {
              marker.infoWindow.setMap(null);
              marker.infoWindow = null;
            }
            marker.setVisible(isVisible);
            if (isVisible) {
              if (!(marker.map != null)) {
                _results1.push(marker.setMap(this.map));
              } else {
                _results1.push(void 0);
              }
            } else {
              if (marker.map != null) {
                _results1.push(marker.setMap(null));
              } else {
                _results1.push(void 0);
              }
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.highlightsCat = function(cats) {
      var cat, markerCat, markerCatObject, _ref, _results;
      _ref = this.mapMarkersObject;
      _results = [];
      for (markerCat in _ref) {
        markerCatObject = _ref[markerCat];
        this.setMarkersVisibilityByCat(false, markerCat);
        this.turnOffMenuIconsFromCat(markerCat);
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = cats.length; _i < _len; _i++) {
            cat = cats[_i];
            if (!(markerCat === cat)) {
              continue;
            }
            this.turnOnMenuIconsFromCat(cat);
            if (this.canToggleMarkers === true) {
              _results1.push(this.setMarkersVisibilityByCat(true, cat));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CustomMap.prototype.destroyLocalStorage = function(e) {
      var confirmMessage,
        _this = this;
      confirmMessage = Traduction["notice"]["dataDestruction"][LANG];
      return this.confirmBox.initConfirmation(confirmMessage, function(e) {
        if (e && _this.getConfigFromLocalStorage()) {
          localStorage.removeItem(_this.localStorageKey);
          return window.location = "/";
        }
      });
    };

    CustomMap.prototype.sendMapForApproval = function(e) {
      var ajaxUrl, confirmMessage, modal, this_,
        _this = this;
      this_ = $(e.currentTarget);
      ajaxUrl = this_.attr('data-ajaxUrl');
      modal = new Cartographer.Modalbox();
      confirmMessage = Traduction["notice"]["dataApproval"][LANG];
      return this.confirmBox.initConfirmation(confirmMessage, function(e) {
        var request;
        if (e === true) {
          modal.setContent('<h1 text-align: center;>Please wait while your request is being handled.</h1><img class="loading" src="/assets/images/loading-black.gif"><p style="text-align: center;">This could take a few seconds</p>');
          modal.open();
          return request = $.ajax({
            url: ajaxUrl,
            type: "POST",
            dataType: 'json',
            crossDomain: true,
            data: {
              "json": _this.handleExport()
            },
            beforeSend: function(x) {
              if (x && x.overrideMimeType) {
                return x.overrideMimeType("application/json;charset=UTF-8");
              }
            },
            success: function(result) {
              if (result.success === true) {
                localStorage.removeItem(_this.localStorageKey);
              }
              modal.setContent(result.message);
              return modal.open();
            }
          });
        }
      });
    };

    CustomMap.prototype.handleExport = function(e) {
      var exportMarkerObject, finalExport, jsonString, marker, markerType, markerTypeObject, markersCat, markersObjects, nm, _i, _len, _ref, _ref1, _ref2;
      exportMarkerObject = {};
      _ref = this.mapMarkersObject;
      for (markersCat in _ref) {
        markersObjects = _ref[markersCat];
        if (!(exportMarkerObject[markersCat] != null)) {
          exportMarkerObject[markersCat] = {};
          exportMarkerObject[markersCat]["data_translation"] = markersObjects["data_translation"];
          exportMarkerObject[markersCat]["marker_types"] = {};
        }
        _ref1 = markersObjects.marker_types;
        for (markerType in _ref1) {
          markerTypeObject = _ref1[markerType];
          exportMarkerObject[markersCat]["marker_types"][markerType] = $.extend(true, {}, markerTypeObject);
          exportMarkerObject[markersCat]["marker_types"][markerType]["markers"] = [];
          _ref2 = markerTypeObject.markers;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            marker = _ref2[_i];
            if (marker["data_translation"] != null) {
              nm = {
                "lng": marker.getPosition().lng(),
                "lat": marker.getPosition().lat(),
                "data_translation": $.extend(true, {}, marker["data_translation"])
              };
            } else {
              nm = {
                "lng": marker.getPosition().lng(),
                "lat": marker.getPosition().lat()
              };
            }
            exportMarkerObject[markersCat]["marker_types"][markerType]["markers"].push(nm);
            nm["id"] = marker["id_marker"];
          }
        }
      }
      finalExport = {};
      finalExport["version"] = this.currentMapVersion;
      finalExport["creation_date"] = "null";
      finalExport["markers"] = exportMarkerObject;
      jsonString = JSON.stringify(finalExport);
      return jsonString;
    };

    CustomMap.prototype.handleAddTool = function(e) {
      var coord, defaultValue, getValue, icon, markerCat, markerLink, markerType, newMarker, newMarkerInfo, otherInfo, parent, this_,
        _this = this;
      this_ = $(e.currentTarget);
      parent = this_.closest('.type-menu-item');
      markerLink = parent.find('.marker-type-link');
      markerType = markerLink.attr('data-type');
      markerCat = markerLink.attr('data-cat');
      icon = markerLink.attr('data-icon');
      coord = this.map.getCenter();
      getValue = function(cat, type) {
        var defaultDesc, defaultTitle, defaultValue;
        defaultValue = null;
        defaultDesc = _this.MarkersConfig[cat]["marker_types"][type]["data_translation"][LANG]["desc"];
        defaultTitle = _this.MarkersConfig[cat]["marker_types"][type]["data_translation"][LANG]["title"] || _this.MarkersConfig[cat]["marker_types"][type]["data_translation"][LANG]["name"];
        if (((defaultDesc != null) || defaultTitle === "") && (defaultTitle != null)) {
          defaultValue = $.extend(true, {}, _this.MarkersConfig[cat]["marker_types"][type]["data_translation"]);
        }
        return defaultValue;
      };
      defaultValue = getValue(markerCat, markerType);
      otherInfo = {
        markersCat: markerCat,
        markersType: markerType,
        icon: icon
      };
      if (defaultValue) {
        newMarkerInfo = {
          id: -1,
          lat: coord.lat(),
          lng: coord.lng(),
          draggable: true
        };
      } else {
        newMarkerInfo = {
          id: -1,
          lat: coord.lat(),
          lng: coord.lng(),
          data_translation: {
            en: {
              title: "",
              desc: "",
              wikiLink: ""
            },
            fr: {
              title: "",
              desc: "",
              wikiLink: ""
            }
          },
          draggable: true
        };
      }
      newMarker = this.addMarker(newMarkerInfo, otherInfo, true, defaultValue);
      return this.mapMarkersObject[markerCat]["marker_types"][markerType]["markers"].push(newMarker);
    };

    CustomMap.prototype.removeMarker = function(id, mType, mCat) {
      var confirmMessage,
        _this = this;
      confirmMessage = Traduction["notice"]["deleteMarker"][LANG];
      return this.confirmBox.initConfirmation(confirmMessage, function(e) {
        var marker, markerKey, _i, _len, _ref;
        if (e) {
          _ref = _this.mapMarkersObject[mCat]["marker_types"][mType]["markers"];
          for (markerKey = _i = 0, _len = _ref.length; _i < _len; markerKey = ++_i) {
            marker = _ref[markerKey];
            if (!(marker.__gm_id === id)) {
              continue;
            }
            if (marker.infoWindow != null) {
              marker.infoWindow.setMap(null);
            }
            marker.setMap(null);
            _this.mapMarkersObject[mCat]["marker_types"][mType]['markers'] = _.reject(_this.mapMarkersObject[mCat]["marker_types"][mType]["markers"], function(m) {
              return m === marker;
            });
            _this.saveToLocalStorage();
            return true;
          }
        }
      });
    };

    CustomMap.prototype.updateMarkerInfos = function(newInfo) {
      var marker, markerKey, _i, _len, _ref;
      _ref = this.mapMarkersObject[newInfo.cat]["marker_types"][newInfo.type]["markers"];
      for (markerKey = _i = 0, _len = _ref.length; _i < _len; markerKey = ++_i) {
        marker = _ref[markerKey];
        if (!(marker.__gm_id === newInfo.id)) {
          continue;
        }
        if (marker["data_translation"] != null) {
          marker["data_translation"][LANG]["desc"] = newInfo.desc;
          marker["data_translation"][LANG]["title"] = newInfo.title;
          marker["data_translation"][LANG]["link_wiki"] = newInfo.wikiLink;
        } else {
          marker.desc = newInfo.desc;
          marker.title = newInfo.title;
          marker.wikiLink = newInfo.wikiLink;
        }
        this.saveToLocalStorage();
        return;
      }
    };

    CustomMap.prototype.saveToLocalStorage = function() {
      var json;
      if (window.LOCAL_STORAGE) {
        json = this.handleExport();
        console.log(this.localStorageKey);
        return localStorage.setItem(this.localStorageKey, json);
      }
    };

    CustomMap.prototype.getMarkerByCoordinates = function(lat, lng) {
      var key, marker, markerTypeObject, markersCat, markersObjects, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      _ref = this.MarkersConfig;
      for (markersCat in _ref) {
        markersObjects = _ref[markersCat];
        _ref1 = markersObjects.marker_types;
        for (key = _i = 0, _len = _ref1.length; _i < _len; key = ++_i) {
          markerTypeObject = _ref1[key];
          _ref2 = markerTypeObject.markers;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            marker = _ref2[_j];
            if (marker.lat === lat && marker.lng === lng) {
              return marker;
            }
          }
        }
      }
      return false;
    };

    CustomMap.prototype.turnOffMenuIconsFromCat = function(markerCat) {
      var menu;
      menu = $(".menu-item[data-markerCat='" + markerCat + "']");
      menu.addClass('off');
      menu.find('.group-toggling').addClass('off');
      return menu.find('.trigger').addClass('off');
    };

    CustomMap.prototype.turnOnMenuIconsFromCat = function(markerCat) {
      var menu;
      menu = $(".menu-item[data-markerCat='" + markerCat + "']");
      menu.removeClass('off');
      menu.find('.group-toggling').removeClass('off');
      return menu.find('.trigger').removeClass('off');
    };

    CustomMap.prototype.addMenuIcons = function() {
      var html, markerCat, template, _results,
        _this = this;
      template = _.template(Cartographer.templates.get("markersOptions"));
      html = $(template(this.MarkersConfig));
      html.find(".trigger").bind('click', function(e) {
        var item, markerCat, markerType, myGroupTrigger, myMenuItem;
        item = $(e.currentTarget);
        myGroupTrigger = item.closest(".menu-marker").find('.group-toggling');
        myMenuItem = item.closest(".menu-item");
        markerType = item.attr('data-type');
        markerCat = item.attr('data-cat');
        if (_this.canToggleMarkers) {
          if (item.hasClass('off')) {
            _this.setMarkersVisibilityByType(true, markerType, markerCat);
            item.removeClass('off');
            myMenuItem.removeClass('off');
            return myGroupTrigger.removeClass('off');
          } else {
            _this.setMarkersVisibilityByType(false, markerType, markerCat);
            return item.addClass('off');
          }
        }
      });
      html.find('.group-toggling').bind('click', function(e) {
        var markerCat, menuItem, this_;
        this_ = $(e.currentTarget);
        menuItem = this_.closest('.menu-item');
        markerCat = menuItem.attr('data-markerCat');
        if (this_.hasClass('off')) {
          this_.removeClass('off');
          menuItem.removeClass('off');
          _this.setMarkersVisibilityByCat(true, markerCat);
          return menuItem.find('.trigger').removeClass('off');
        } else {
          this_.addClass('off');
          menuItem.addClass('off');
          _this.setMarkersVisibilityByCat(false, markerCat);
          return menuItem.find('.trigger').addClass('off');
        }
      });
      this.markersOptionsMenu.find('.padding').prepend(html);
      _results = [];
      for (markerCat in this.MarkersConfig) {
        if (markerCat !== this.defaultCat) {
          _results.push(this.turnOffMenuIconsFromCat(markerCat));
        }
      }
      return _results;
    };

    CustomMap.prototype.initializeAreaSummaryBoxes = function() {
      var _this = this;
      return Cartographer.templates.get("areasSummary", function(e) {
        var area, _results;
        _results = [];
        for (area in Areas) {
          _results.push(_this.areaSummaryBoxes[area] = new AreaSummary(_this.map, Areas[area], e));
        }
        return _results;
      });
    };

    CustomMap.prototype.setAreasInformationVisibility = function(isVisible) {
      var box, _i, _len, _ref, _results;
      _ref = this.areaSummaryBoxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        _results.push(box.setVisible(isVisible));
      }
      return _results;
    };

    CustomMap.prototype.toggleMarkersOptionsMenu = function() {
      return this.markersOptionsMenu.toggleClass('active');
    };

    CustomMap.prototype.hideMarkersOptionsMenu = function() {
      return this.markersOptionsMenu.addClass('off');
    };

    CustomMap.prototype.showMarkersOptionsMenu = function() {
      return this.markersOptionsMenu.removeClass('off');
    };

    return CustomMap;

  })();

  /*
  # }}}
  */


  /*
  # class AreaSummary {{{
  */


  AreaSummary = (function() {

    AreaSummary.name = 'AreaSummary';

    function AreaSummary(map, area, template) {
      var neBound, swBound;
      swBound = new google.maps.LatLng(area.swLat, area.swLng);
      neBound = new google.maps.LatLng(area.neLat, area.neLng);
      this.bounds_ = new google.maps.LatLngBounds(swBound, neBound);
      this.area_ = area;
      this.div_ = null;
      this.height_ = 80;
      this.width_ = 150;
      this.template = _.template(template);
      this.setMap(map);
    }

    AreaSummary.prototype = new google.maps.OverlayView();

    AreaSummary.prototype.onAdd = function() {
      var content, panes;
      content = this.template(this.area_);
      this.div_ = $(content)[0];
      panes = this.getPanes();
      panes.overlayImage.appendChild(this.div_);
      return this.setVisible(false);
    };

    AreaSummary.prototype.draw = function() {
      var div, ne, overlayProjection, sw;
      overlayProjection = this.getProjection();
      sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
      ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());
      div = this.div_;
      div.style.left = sw.x + ((ne.x - sw.x) - this.width_) / 2 + 'px';
      return div.style.top = ne.y + ((sw.y - ne.y) - this.height_) / 2 + 'px';
    };

    AreaSummary.prototype.setVisible = function(isVisible) {
      if (this.div_) {
        if (isVisible === true) {
          return this.div_.style.visibility = "visible";
        } else {
          return this.div_.style.visibility = "hidden";
        }
      }
    };

    return AreaSummary;

  })();

  /*
  # }}}
  */


  /*
  # class CustomInfoWindow {{{
  */


  CustomInfoWindow = (function() {

    CustomInfoWindow.name = 'CustomInfoWindow';

    function CustomInfoWindow(marker, content, opts) {
      this.handleSave = __bind(this.handleSave, this);

      this.toggleSection = __bind(this.toggleSection, this);

      this.open = __bind(this.open, this);

      this.close = __bind(this.close, this);

      var wrap;
      this.content = content;
      this.marker = marker;
      this.template = opts.template;
      this.map = marker.map;
      wrap = "<div class=\"customInfoWindow\">\n  <a href=\"javascript:\" title=\"Close\" class=\"close button\"></a>\n    <div class=\"padding\"></div>\n</div>";
      this.wrap = $(wrap);
      this.closeBtn = this.wrap.find('.close');
      this.setMap(this.map);
      this.isVisible = false;
      this.onClose = opts.onClose;
      this.onOpen = opts.onOpen;
      this.onSave = opts.onSave;
      this.deleteCalled = opts.deleteCalled;
      this.moveCalled = opts.moveCalled;
      this.closeBtn.bind('click', this.close);
    }

    CustomInfoWindow.prototype = new google.maps.OverlayView();

    CustomInfoWindow.prototype.onAdd = function() {
      var panes;
      this.wrap.find('.padding').append(this.content);
      this.wrap.css({
        display: "block",
        position: "absolute"
      });
      panes = this.getPanes();
      panes.overlayMouseTarget.appendChild(this.wrap[0]);
      this.iWidth = this.wrap.outerWidth();
      this.iHeight = this.wrap.outerHeight();
      return this.bindButton();
    };

    CustomInfoWindow.prototype.bindButton = function() {
      this.wrap.find('button').bind('click', this.handleSave);
      return this.wrap.find('.iw-options-list .button').bind('click', this.toggleSection);
    };

    CustomInfoWindow.prototype.onRemove = function() {
      this.wrap[0].parentNode.removeChild(this.wrap[0]);
      return this.wrap = null;
    };

    CustomInfoWindow.prototype.draw = function() {
      var cancelHandler, event, events, overlayProjection, pos, _i, _len, _results,
        _this = this;
      cancelHandler = function(e) {
        e.cancelBubble = true;
        if (e.stopPropagation) {
          return e.stopPropagation();
        }
      };
      overlayProjection = this.getProjection();
      pos = overlayProjection.fromLatLngToDivPixel(this.marker.position);
      this.wrap.css({
        left: pos.x + 30,
        top: pos.y - 80
      });
      events = ['mousedown', 'touchstart', 'touchend', 'touchmove', 'contextmenu', 'click', 'dblclick', 'mousewheel', 'DOMMouseScroll'];
      this.listeners = [];
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        _results.push(this.listeners.push(google.maps.event.addDomListener(this.wrap[0], event, cancelHandler)));
      }
      return _results;
    };

    CustomInfoWindow.prototype.close = function() {
      if (this.wrap) {
        this.onClose(this);
        this.isVisible = false;
        return this.wrap.css({
          display: "none"
        });
      }
    };

    CustomInfoWindow.prototype.open = function() {
      if (this.wrap) {
        this.panMap();
        this.onOpen(this);
        this.isVisible = true;
        return this.wrap.css({
          display: "block"
        });
      }
    };

    CustomInfoWindow.prototype.updatePos = function() {
      var newVal, overlayProjection, pos, shareInput, val;
      overlayProjection = this.getProjection();
      pos = overlayProjection.fromLatLngToDivPixel(this.marker.position);
      shareInput = this.wrap.find('[name="share-link"]');
      val = shareInput.val();
      newVal = val.split("?")[0] + "?lat=" + this.marker.position.lat() + "&lng=" + this.marker.position.lng();
      shareInput.val(newVal);
      return this.wrap.css({
        left: pos.x + 30,
        top: pos.y - 80
      });
    };

    CustomInfoWindow.prototype.toggleSection = function(e) {
      var action, activeTab, defaultTab, mywrap, targetTab, this_;
      this_ = $(e.currentTarget);
      mywrap = this_.closest('.customInfoWindow');
      action = this_.attr('data-action');
      defaultTab = mywrap.find('.marker-desc');
      activeTab = mywrap.find('.toggling-tab.active');
      targetTab = mywrap.find("[data-target='" + action + "']");
      switch (action) {
        case "move":
        case "share":
        case "edit":
          mywrap.find('.iw-options-list .button').removeClass('active');
          if (targetTab.attr("data-target") === activeTab.attr("data-target")) {
            targetTab.removeClass('active');
            defaultTab.addClass('active');
          } else {
            this_.addClass('active');
            activeTab.removeClass('active');
            targetTab.addClass('active');
            defaultTab.removeClass('active');
          }
          break;
        case "delete":
          this.deleteCalled(this.marker);
      }
      if (action === "move") {
        return this.moveCalled(this.marker);
      }
    };

    CustomInfoWindow.prototype.handleSave = function(e) {
      var form, lang, newDesc, newInfo, newTitle, newWikiLink, this_;
      this_ = $(e.currentTarget);
      form = this.wrap.find('.edit-form');
      newTitle = this.wrap.find('[name="marker-title"]').val();
      newDesc = this.wrap.find('[name="marker-description"]').val();
      newDesc = newDesc.replace(/\n/g, '<br />');
      newWikiLink = this.wrap.find('[name="marker-wiki"]').val();
      form.removeClass('active');
      lang = window.LANG === "en" ? '#/' : "#/fr/";
      newInfo = {
        id: this.marker.__gm_id,
        title: newTitle,
        desc: newDesc,
        wikiLink: newWikiLink,
        type: this.marker.type,
        cat: this.marker.cat,
        lat: this.marker.position.lat(),
        lng: this.marker.position.lng(),
        shareLink: "http://" + window.location.hostname + "/" + lang + "show/" + this.marker.id_marker + "/",
        hasDefaultValue: this.marker["hasDefaultValue"]
      };
      this.wrap.find('.padding').html(this.template(newInfo));
      this.bindButton();
      this.wrap.find('.edit').removeClass('active');
      return this.onSave(newInfo);
    };

    CustomInfoWindow.prototype.panMap = function() {
      return this.map.panTo(new google.maps.LatLng(this.marker.position.lat(), this.marker.position.lng()));
    };

    return CustomInfoWindow;

  })();

  /*
  # }}}
  */


  Cartographer.router = Backbone.Router.extend({
    routes: {},
    initialize: function() {
      var routes,
        _this = this;
      routes = [[/^\/*(en|fr)\/*$/, 'lang', this.handleLang], [/^\/*(en|fr)*\/*show\/([0-9]+)\/*$/, 'show', this.handleShow], [/^\/*(en|fr)*\/*lat\/([\-0-9.]+)\/lng\/([\-0-9.]+)\/*$/, 'coord', this.handleCoord], [/^\/*(en|fr)*\/*cat\/([a-zA-Z&]+)\/*$/, 'categories', this.handleCat]];
      _.each(routes, function(route) {
        return _this.route.apply(_this, route);
      });
      return Backbone.history.start();
    },
    handleLang: function(lang) {
      return Cartographer.switchLang(lang);
    },
    handleCat: function(lang, a) {
      if (lang != null) {
        this.handleLang(lang);
      }
      return Cartographer.toggleCat(a.split('&'));
    },
    handleShow: function(lang, id) {
      if (lang != null) {
        this.handleLang(lang);
      }
      return Cartographer.highlighMarker(id);
    },
    handleCoord: function(lang, lat, lng) {
      if (lang != null) {
        this.handleLang(lang);
      }
      return Cartographer.highlighMarker({
        lat: lat,
        lng: lng
      });
    }
  });

  $(function() {
    return Cartographer.initiate();
  });

}).call(this);
